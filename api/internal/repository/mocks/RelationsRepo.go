// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/s3corp-github/SP_FriendManagementAPI_QuangPham/api/internal/repository/orm/models"
	mock "github.com/stretchr/testify/mock"
)

// RelationsRepo is an autogenerated mock type for the RelationsRepo type
type RelationsRepo struct {
	mock.Mock
}

// CreateRelation provides a mock function with given fields: ctx, input
func (_m *RelationsRepo) CreateRelation(ctx context.Context, input dbmodels.Relation) (bool, error) {
	ret := _m.Called(ctx, input)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, dbmodels.Relation) bool); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dbmodels.Relation) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRelation provides a mock function with given fields: ctx, requesterId, addresseeId, relationType
func (_m *RelationsRepo) DeleteRelation(ctx context.Context, requesterId int, addresseeId int, relationType int) error {
	ret := _m.Called(ctx, requesterId, addresseeId, relationType)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = rf(ctx, requesterId, addresseeId, relationType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRelationIDsOfUser provides a mock function with given fields: ctx, requesterId, relationType
func (_m *RelationsRepo) GetRelationIDsOfUser(ctx context.Context, requesterId int, relationType int) ([]int, error) {
	ret := _m.Called(ctx, requesterId, relationType)

	var r0 []int
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []int); ok {
		r0 = rf(ctx, requesterId, relationType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, requesterId, relationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequesterIDRelation provides a mock function with given fields: ctx, requesterId, relationType
func (_m *RelationsRepo) GetRequesterIDRelation(ctx context.Context, requesterId int, relationType int) ([]int, error) {
	ret := _m.Called(ctx, requesterId, relationType)

	var r0 []int
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []int); ok {
		r0 = rf(ctx, requesterId, relationType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, requesterId, relationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsRelationExist provides a mock function with given fields: ctx, requesterId, addresseeId, relationType
func (_m *RelationsRepo) IsRelationExist(ctx context.Context, requesterId int, addresseeId int, relationType int) (bool, error) {
	ret := _m.Called(ctx, requesterId, addresseeId, relationType)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) bool); ok {
		r0 = rf(ctx, requesterId, addresseeId, relationType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, requesterId, addresseeId, relationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRelationsRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewRelationsRepo creates a new instance of RelationsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRelationsRepo(t mockConstructorTestingTNewRelationsRepo) *RelationsRepo {
	mock := &RelationsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
