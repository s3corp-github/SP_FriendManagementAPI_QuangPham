// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Relation is an object representing the database table.
type Relation struct {
	ID             int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	RequesterID    int       `boil:"requester_id" json:"requester_id" toml:"requester_id" yaml:"requester_id"`
	AddresseeID    int       `boil:"addressee_id" json:"addressee_id" toml:"addressee_id" yaml:"addressee_id"`
	RequesterEmail string    `boil:"requester_email" json:"requester_email" toml:"requester_email" yaml:"requester_email"`
	AddresseeEmail string    `boil:"addressee_email" json:"addressee_email" toml:"addressee_email" yaml:"addressee_email"`
	RelationType   int  `boil:"relation_type" json:"relation_type,omitempty" toml:"relation_type" yaml:"relation_type,omitempty"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *relationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L relationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RelationColumns = struct {
	ID             string
	RequesterID    string
	AddresseeID    string
	RequesterEmail string
	AddresseeEmail string
	RelationType   string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	RequesterID:    "requester_id",
	AddresseeID:    "addressee_id",
	RequesterEmail: "requester_email",
	AddresseeEmail: "addressee_email",
	RelationType:   "relation_type",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var RelationTableColumns = struct {
	ID             string
	RequesterID    string
	AddresseeID    string
	RequesterEmail string
	AddresseeEmail string
	RelationType   string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "relations.id",
	RequesterID:    "relations.requester_id",
	AddresseeID:    "relations.addressee_id",
	RequesterEmail: "relations.requester_email",
	AddresseeEmail: "relations.addressee_email",
	RelationType:   "relations.relation_type",
	CreatedAt:      "relations.created_at",
	UpdatedAt:      "relations.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var RelationWhere = struct {
	ID             whereHelperint
	RequesterID    whereHelperint
	AddresseeID    whereHelperint
	RequesterEmail whereHelperstring
	AddresseeEmail whereHelperstring
	RelationType   whereHelpernull_Int
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperint{field: "\"relations\".\"id\""},
	RequesterID:    whereHelperint{field: "\"relations\".\"requester_id\""},
	AddresseeID:    whereHelperint{field: "\"relations\".\"addressee_id\""},
	RequesterEmail: whereHelperstring{field: "\"relations\".\"requester_email\""},
	AddresseeEmail: whereHelperstring{field: "\"relations\".\"addressee_email\""},
	RelationType:   whereHelpernull_Int{field: "\"relations\".\"relation_type\""},
	CreatedAt:      whereHelpertime_Time{field: "\"relations\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"relations\".\"updated_at\""},
}

// RelationRels is where relationship names are stored.
var RelationRels = struct {
	Addressee string
	Requester string
}{
	Addressee: "Addressee",
	Requester: "Requester",
}

// relationR is where relationships are stored.
type relationR struct {
	Addressee *User `boil:"Addressee" json:"Addressee" toml:"Addressee" yaml:"Addressee"`
	Requester *User `boil:"Requester" json:"Requester" toml:"Requester" yaml:"Requester"`
}

// NewStruct creates a new relationship struct
func (*relationR) NewStruct() *relationR {
	return &relationR{}
}

func (r *relationR) GetAddressee() *User {
	if r == nil {
		return nil
	}
	return r.Addressee
}

func (r *relationR) GetRequester() *User {
	if r == nil {
		return nil
	}
	return r.Requester
}

// relationL is where Load methods for each relationship are stored.
type relationL struct{}

var (
	relationAllColumns            = []string{"id", "requester_id", "addressee_id", "requester_email", "addressee_email", "relation_type", "created_at", "updated_at"}
	relationColumnsWithoutDefault = []string{"requester_id", "addressee_id", "requester_email", "addressee_email"}
	relationColumnsWithDefault    = []string{"id", "relation_type", "created_at", "updated_at"}
	relationPrimaryKeyColumns     = []string{"id"}
	relationGeneratedColumns      = []string{}
)

type (
	// RelationSlice is an alias for a slice of pointers to Relation.
	// This should almost always be used instead of []Relation.
	RelationSlice []*Relation
	// RelationHook is the signature for custom Relation hook methods
	RelationHook func(context.Context, boil.ContextExecutor, *Relation) error

	relationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	relationType                 = reflect.TypeOf(&Relation{})
	relationMapping              = queries.MakeStructMapping(relationType)
	relationPrimaryKeyMapping, _ = queries.BindMapping(relationType, relationMapping, relationPrimaryKeyColumns)
	relationInsertCacheMut       sync.RWMutex
	relationInsertCache          = make(map[string]insertCache)
	relationUpdateCacheMut       sync.RWMutex
	relationUpdateCache          = make(map[string]updateCache)
	relationUpsertCacheMut       sync.RWMutex
	relationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var relationAfterSelectHooks []RelationHook

var relationBeforeInsertHooks []RelationHook
var relationAfterInsertHooks []RelationHook

var relationBeforeUpdateHooks []RelationHook
var relationAfterUpdateHooks []RelationHook

var relationBeforeDeleteHooks []RelationHook
var relationAfterDeleteHooks []RelationHook

var relationBeforeUpsertHooks []RelationHook
var relationAfterUpsertHooks []RelationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Relation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Relation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Relation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Relation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Relation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Relation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Relation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Relation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Relation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRelationHook registers your hook function for all future operations.
func AddRelationHook(hookPoint boil.HookPoint, relationHook RelationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		relationAfterSelectHooks = append(relationAfterSelectHooks, relationHook)
	case boil.BeforeInsertHook:
		relationBeforeInsertHooks = append(relationBeforeInsertHooks, relationHook)
	case boil.AfterInsertHook:
		relationAfterInsertHooks = append(relationAfterInsertHooks, relationHook)
	case boil.BeforeUpdateHook:
		relationBeforeUpdateHooks = append(relationBeforeUpdateHooks, relationHook)
	case boil.AfterUpdateHook:
		relationAfterUpdateHooks = append(relationAfterUpdateHooks, relationHook)
	case boil.BeforeDeleteHook:
		relationBeforeDeleteHooks = append(relationBeforeDeleteHooks, relationHook)
	case boil.AfterDeleteHook:
		relationAfterDeleteHooks = append(relationAfterDeleteHooks, relationHook)
	case boil.BeforeUpsertHook:
		relationBeforeUpsertHooks = append(relationBeforeUpsertHooks, relationHook)
	case boil.AfterUpsertHook:
		relationAfterUpsertHooks = append(relationAfterUpsertHooks, relationHook)
	}
}

// OneG returns a single relation record from the query using the global executor.
func (q relationQuery) OneG(ctx context.Context) (*Relation, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single relation record from the query.
func (q relationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Relation, error) {
	o := &Relation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for relations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Relation records from the query using the global executor.
func (q relationQuery) AllG(ctx context.Context) (RelationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Relation records from the query.
func (q relationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RelationSlice, error) {
	var o []*Relation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Relation slice")
	}

	if len(relationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Relation records in the query using the global executor
func (q relationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Relation records in the query.
func (q relationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count relations rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q relationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q relationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if relations exists")
	}

	return count > 0, nil
}

// Addressee pointed to by the foreign key.
func (o *Relation) Addressee(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AddresseeID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Requester pointed to by the foreign key.
func (o *Relation) Requester(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RequesterID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadAddressee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (relationL) LoadAddressee(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRelation interface{}, mods queries.Applicator) error {
	var slice []*Relation
	var object *Relation

	if singular {
		var ok bool
		object, ok = maybeRelation.(*Relation)
		if !ok {
			object = new(Relation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRelation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRelation))
			}
		}
	} else {
		s, ok := maybeRelation.(*[]*Relation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRelation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRelation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &relationR{}
		}
		args = append(args, object.AddresseeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &relationR{}
			}

			for _, a := range args {
				if a == obj.AddresseeID {
					continue Outer
				}
			}

			args = append(args, obj.AddresseeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(relationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Addressee = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AddresseeRelations = append(foreign.R.AddresseeRelations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AddresseeID == foreign.ID {
				local.R.Addressee = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AddresseeRelations = append(foreign.R.AddresseeRelations, local)
				break
			}
		}
	}

	return nil
}

// LoadRequester allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (relationL) LoadRequester(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRelation interface{}, mods queries.Applicator) error {
	var slice []*Relation
	var object *Relation

	if singular {
		var ok bool
		object, ok = maybeRelation.(*Relation)
		if !ok {
			object = new(Relation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRelation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRelation))
			}
		}
	} else {
		s, ok := maybeRelation.(*[]*Relation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRelation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRelation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &relationR{}
		}
		args = append(args, object.RequesterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &relationR{}
			}

			for _, a := range args {
				if a == obj.RequesterID {
					continue Outer
				}
			}

			args = append(args, obj.RequesterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(relationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Requester = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.RequesterRelations = append(foreign.R.RequesterRelations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RequesterID == foreign.ID {
				local.R.Requester = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.RequesterRelations = append(foreign.R.RequesterRelations, local)
				break
			}
		}
	}

	return nil
}

// SetAddresseeG of the relation to the related item.
// Sets o.R.Addressee to related.
// Adds o to related.R.AddresseeRelations.
// Uses the global database handle.
func (o *Relation) SetAddresseeG(ctx context.Context, insert bool, related *User) error {
	return o.SetAddressee(ctx, boil.GetContextDB(), insert, related)
}

// SetAddressee of the relation to the related item.
// Sets o.R.Addressee to related.
// Adds o to related.R.AddresseeRelations.
func (o *Relation) SetAddressee(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"relations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"addressee_id"}),
		strmangle.WhereClause("\"", "\"", 2, relationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AddresseeID = related.ID
	if o.R == nil {
		o.R = &relationR{
			Addressee: related,
		}
	} else {
		o.R.Addressee = related
	}

	if related.R == nil {
		related.R = &userR{
			AddresseeRelations: RelationSlice{o},
		}
	} else {
		related.R.AddresseeRelations = append(related.R.AddresseeRelations, o)
	}

	return nil
}

// SetRequesterG of the relation to the related item.
// Sets o.R.Requester to related.
// Adds o to related.R.RequesterRelations.
// Uses the global database handle.
func (o *Relation) SetRequesterG(ctx context.Context, insert bool, related *User) error {
	return o.SetRequester(ctx, boil.GetContextDB(), insert, related)
}

// SetRequester of the relation to the related item.
// Sets o.R.Requester to related.
// Adds o to related.R.RequesterRelations.
func (o *Relation) SetRequester(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"relations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"requester_id"}),
		strmangle.WhereClause("\"", "\"", 2, relationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RequesterID = related.ID
	if o.R == nil {
		o.R = &relationR{
			Requester: related,
		}
	} else {
		o.R.Requester = related
	}

	if related.R == nil {
		related.R = &userR{
			RequesterRelations: RelationSlice{o},
		}
	} else {
		related.R.RequesterRelations = append(related.R.RequesterRelations, o)
	}

	return nil
}

// Relations retrieves all the records using an executor.
func Relations(mods ...qm.QueryMod) relationQuery {
	mods = append(mods, qm.From("\"relations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"relations\".*"})
	}

	return relationQuery{q}
}

// FindRelationG retrieves a single record by ID.
func FindRelationG(ctx context.Context, iD int, selectCols ...string) (*Relation, error) {
	return FindRelation(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRelation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRelation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Relation, error) {
	relationObj := &Relation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"relations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, relationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from relations")
	}

	if err = relationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return relationObj, err
	}

	return relationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Relation) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Relation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no relations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(relationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	relationInsertCacheMut.RLock()
	cache, cached := relationInsertCache[key]
	relationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			relationAllColumns,
			relationColumnsWithDefault,
			relationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(relationType, relationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(relationType, relationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"relations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"relations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into relations")
	}

	if !cached {
		relationInsertCacheMut.Lock()
		relationInsertCache[key] = cache
		relationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Relation record using the global executor.
// See Update for more documentation.
func (o *Relation) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Relation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Relation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	relationUpdateCacheMut.RLock()
	cache, cached := relationUpdateCache[key]
	relationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			relationAllColumns,
			relationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update relations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"relations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, relationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(relationType, relationMapping, append(wl, relationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update relations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for relations")
	}

	if !cached {
		relationUpdateCacheMut.Lock()
		relationUpdateCache[key] = cache
		relationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q relationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q relationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for relations")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RelationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RelationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"relations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, relationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in relation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all relation")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Relation) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Relation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no relations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(relationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	relationUpsertCacheMut.RLock()
	cache, cached := relationUpsertCache[key]
	relationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			relationAllColumns,
			relationColumnsWithDefault,
			relationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			relationAllColumns,
			relationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert relations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(relationPrimaryKeyColumns))
			copy(conflict, relationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"relations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(relationType, relationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(relationType, relationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert relations")
	}

	if !cached {
		relationUpsertCacheMut.Lock()
		relationUpsertCache[key] = cache
		relationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Relation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Relation) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Relation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Relation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Relation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), relationPrimaryKeyMapping)
	sql := "DELETE FROM \"relations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for relations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q relationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q relationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no relationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for relations")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RelationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RelationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(relationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"relations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, relationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from relation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for relations")
	}

	if len(relationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Relation) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: no Relation provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Relation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRelation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RelationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: empty RelationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RelationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RelationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"relations\".* FROM \"relations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, relationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in RelationSlice")
	}

	*o = slice

	return nil
}

// RelationExistsG checks if the Relation row exists.
func RelationExistsG(ctx context.Context, iD int) (bool, error) {
	return RelationExists(ctx, boil.GetContextDB(), iD)
}

// RelationExists checks if the Relation row exists.
func RelationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"relations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if relations exists")
	}

	return exists, nil
}
