// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UtilsInf is an autogenerated mock type for the UtilsInf type
type UtilsInf struct {
	mock.Mock
}

// FindEmailFromText provides a mock function with given fields: text
func (_m *UtilsInf) FindEmailFromText(text string) []string {
	ret := _m.Called(text)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetReceiverID provides a mock function with given fields: a, b
func (_m *UtilsInf) GetReceiverID(a []int, b []int) []int {
	ret := _m.Called(a, b)

	var r0 []int
	if rf, ok := ret.Get(0).(func([]int, []int) []int); ok {
		r0 = rf(a, b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

// Intersection provides a mock function with given fields: a, b
func (_m *UtilsInf) Intersection(a []int, b []int) []int {
	ret := _m.Called(a, b)

	var r0 []int
	if rf, ok := ret.Get(0).(func([]int, []int) []int); ok {
		r0 = rf(a, b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

// UniqueSlice provides a mock function with given fields: intSlice
func (_m *UtilsInf) UniqueSlice(intSlice []int) []int {
	ret := _m.Called(intSlice)

	var r0 []int
	if rf, ok := ret.Get(0).(func([]int) []int); ok {
		r0 = rf(intSlice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

// removeIndex provides a mock function with given fields: s, index
func (_m *UtilsInf) removeIndex(s []int, index int) []int {
	ret := _m.Called(s, index)

	var r0 []int
	if rf, ok := ret.Get(0).(func([]int, int) []int); ok {
		r0 = rf(s, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

type mockConstructorTestingTNewUtilsInf interface {
	mock.TestingT
	Cleanup(func())
}

// NewUtilsInf creates a new instance of UtilsInf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUtilsInf(t mockConstructorTestingTNewUtilsInf) *UtilsInf {
	mock := &UtilsInf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
